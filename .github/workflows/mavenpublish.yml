# This workflow will build a package using Maven and then publish it to GitHub packages when a release is created
# For more information see: https://github.com/actions/setup-java#apache-maven-with-a-settings-path

name: Maven Package

on:
#  release:
#    types: [ released ]
  workflow_run:
    workflows: [ "Java CI with Maven", "Release Workflow" ]
    branches: [ master ]
    types:
      - completed
    concurrency:
      group: 'artifact-download'

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Download Java CI with Maven artifacts
        uses: actions/download-artifact@v2
        with:
          name: java-artifacts
          path: ${{ github.workspace }}/java-artifacts

      - name: Set up JDK 18
        uses: actions/setup-java@v1
        with:
          java-version: 18
          server-id: github # Value of the distributionManagement/repository/id field of the pom.xml
          settings-path: ${{ github.workspace }} # location for the settings.xml file

      - name: Publish to GitHub Packages Apache Maven
        run: ï½œ
          mv ${{ github.workspace }}/java-artifacts/* $GITHUB_WORKSPACE
          pwd
          ls
          ls -l $GITHUB_WORKSPACE
          mvn deploy -s $GITHUB_WORKSPACE/settings.xml
        env:
          GITHUB_TOKEN: ${{ github.token }}

#    - name: Set up Apache Maven Central
#      uses: actions/setup-java@v1
#      with: # running setup-java again overwrites the settings.xml
#        java-version: 18
#        server-id: maven # Value of the distributionManagement/repository/id field of the pom.xml
#        server-username: MAVEN_USERNAME # env variable for username in deploy
#        server-password: MAVEN_CENTRAL_TOKEN # env variable for token in deploy
#
#      - name: Publish to Apache Maven Central
#        run: mvn deploy
#        env:
#          MAVEN_USERNAME: maven_username123
#          MAVEN_CENTRAL_TOKEN: ${{ secrets.MAVEN_CENTRAL_TOKEN }}
